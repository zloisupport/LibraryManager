<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAIABoBAAAJgAAACAgAAABACAAqBAAAI4EAAAoAAAAEAAAACAAAAABACAAAAAAADAE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABtbW0cVVVVBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAICAgAJqamqYampquWpqapMAAAAAAAAAAWlpaRFpaWkRaWlpEWlpaRFpaWkRaWlpEWlp
        aRFpaWkRaWlpEVVVVQNpaWmla2trxGpqarxra2tpAAAAAGpqapFqamqJa2triGtra4hra2uIa2triGtr
        a4hra2uIa2triGhoaGJqamqQaWlpXGpqan1qamqygICAAgAAAABqamqcAAAAAAAAAAAAAAAAb29vF2lp
        aVBqamqkampqq2NjYxJqamqRampqW2lpaVVpaWmWbGxsRwAAAAAAAAAAampqnGpqamdpaWm/ampqmGpq
        aoBpaWlaaWlpYWlpaU5ra2uSaWlpWmtra1ZqamqVaGhoIGtra6AAAAAAAAAAAGpqapxqampxaWlpMwAA
        AAAAAAAAAAAAAG1tbQdqamq2aGhoYGpqamNra2uIampqMGpqanFra2ugAAAAAAAAAABqamqcampqcWlp
        aTMAAAAAAAAAAAAAAABtbW0jaWlpqmtra9dra2uGAAAAAGlpaTNqampxa2troAAAAAAAAAAAampqnGpq
        anFpaWkzAAAAAAAAAAAAAAAAbGxsbWlpadBpaWlhAAAAAAAAAABpaWkzampqcWtra6AAAAAAAAAAAGpq
        apxqampxaWlpMwAAAAAAAAAAAAAAAG1tbRxtbW0jAAAAAAAAAAAAAAAAaWlpM2pqanFra2ugAAAAAAAA
        AABqamqcampqcWlpaTMAAAAAAAAAAAAAAABpaWlQa2trTwAAAAAAAAAAAAAAAGlpaTNqampxa2troAAA
        AAAAAAAAa2trnmtra4FpaWkzAAAAAAAAAAAAAAAAaWlpUGtra08AAAAAAAAAAAAAAABpaWkza2trgWpq
        aqEAAAAAAAAAAGdnZypqamqjaWlpMwAAAAAAAAAAAAAAAGpqamxpaWlyAAAAAAAAAAAAAAAAaWlpM2pq
        aq1sbGwtAAAAAAAAAAAAAAAAampqcWlpaWhra2tRampqdmpqaq5qampvampqampqaq9paWl3ampqUmtr
        a2lqampxAAAAAAAAAAAAAAAAAAAAAG1tbSNpaWlVampqVGhoaCyAgIACAAAAAAAAAACAgIACaGhoLGpq
        alRpaWlVaWlpIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD/+AAA//EAAIAtAAC+WwAAo7UAAL9tAAC/HQAAv30AAL/9
        AAC//QAAn/kAAN/7AAD9vwAA//8AAP//AAAoAAAAIAAAAEAAAAABACAAAAAAAIAQAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAaGhoLGtra3BnZ2clAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAYGBgCGpqaqtpaWn5ampq5GpqavZpaWknAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAHFxcQlqamq5ampq92tra/tra2tPampq7GpqamAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABxcXEJa2tr12pqavtqamo8ampqjmtra/tqamrzbW1tHAAAAAAAAAAAAAAAAGlp
        aRFpaWkzaWlpM2lpaTNpaWkzaWlpM2lpaTNpaWkzaWlpM2lpaTNpaWkzaWlpM2lpaTNpaWkzaWlpM2lp
        aTNpaWkzaWlpM2lpaTOAgIAEcXFxCWpqarppaWnqa2tr1WpqatJsbGxTampq/GlpaY8AAAAAAAAAAAAA
        AABqamokampq8Gpqav9qamr/ampq/2pqav9qamr/ampq/2pqav9qamr/ampq/2pqav9qamr/ampq/2pq
        av9qamr/ampq/2pqav9qamr/ampqeFVVVQZra2uxampq7mxsbDRpaWkRampq2GpqavxqamqogICABAAA
        AAAAAAAAAAAAAGlpaWZqamrZaWlpEWlpaRFpaWkRaWlpEWlpaRFpaWkRaWlpEWlpaRFpaWkRaWlpEWlp
        aRFpaWkRaWlpEWlpaRFpaWkRaWlpEXBwcBBVVVUGa2trsWpqau5sbGw0AAAAAGxsbDtra2vzaWlpw4CA
        gAQAAAAAAAAAAAAAAAAAAAAAampqampqas8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAbW1tDmpqanNqamqEbW1tFQAAAAAAAAAAVVVVBmtra7FqamruaWlpMwAAAABqamo8ampq8mlp
        aaeAgIAGZ2dnJQAAAAAAAAAAAAAAAAAAAABqampqampqzwAAAAAAAAAAAAAAAAAAAAAAAAAAZmZmCmpq
        ah1qampNampqf2pqarVqamr3ampq/2pqav9qamr7bGxsQFVVVQZra2uxampq7mlpaTMAAAAAampqPGpq
        avJpaWmngICABGpqapBqampqAAAAAAAAAAAAAAAAAAAAAGpqampqamrPAAAAAGpqarZqamruampq7mtr
        a/lqamr/ampq/2pqav5qamrdampqnWlpaVVra2ueampqpmtrazdVVVUGa2trsWpqau5paWkzAAAAAGpq
        ajxqamryaWlpp1VVVQMAAAAAampq1mpqamoAAAAAAAAAAAAAAAAAAAAAampqampqas8AAAAAampq4Gtr
        a5lpaWlVaWlpS2lpaURqamopbW1tBwAAAAAAAAAAAAAAAGtra5JqampXVVVVBmpqarJqamrqaWlpLgAA
        AABqamo8ampq82lpaadAQEAEaWlpdwAAAABqamrWampqagAAAAAAAAAAAAAAAAAAAABqampqampqzwAA
        AABqamrgaWlpZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZmZmHklJSQdqamq1ampq6mlp
        aS4AAAAAampqPGpqavNqamqfgICAAmlpaVpqamrgAAAAAGpqatZqampqAAAAAAAAAAAAAAAAAAAAAGpq
        ampqamrPAAAAAGpqauBpaWlmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAampqwWtr
        a/1qamqCZmZmFGxsbEdqamr3ampqlwAAAAEAAAAAaWlpZmpqauAAAAAAampq1mpqamoAAAAAAAAAAAAA
        AAAAAAAAampqampqas8AAAAAampq4GlpaWYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGho
        aBZqamr6ampqt2pqavxqamqRampq92pqapcAAAABAAAAAAAAAABpaWlmampq4AAAAABqamrWampqagAA
        AAAAAAAAAAAAAAAAAABqampqampqzwAAAABqamrgaWlpZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAa2trbmpqavFtbW0Vampqymlpaf5paWmWAAAAAQAAAAAAAAAAAAAAAGlpaWZqamrgAAAAAGpq
        atZqampqAAAAAAAAAAAAAAAAAAAAAGpqampqamrPAAAAAGpqauBpaWlmAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABpaWnQampq/mpqavpra2vta2trmwAAAAEAAAAAAAAAAAAAAAAAAAAAaWlpZmpq
        auAAAAAAampq1mpqamoAAAAAAAAAAAAAAAAAAAAAampqampqas8AAAAAampq4GlpaWYAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAbW1tB2lpaelpaWm0aGhoU21tbQcAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABpaWlmampq4AAAAABqamrWampqagAAAAAAAAAAAAAAAAAAAABqampqampqzwAAAABqamrgaWlpZgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAGlpaWZqamrgAAAAAGpqatZqampqAAAAAAAAAAAAAAAAAAAAAGpqampqamrPAAAAAGpq
        auBpaWlmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABpaWltaWlpjwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAaWlpZmpqauAAAAAAampq1mpqamoAAAAAAAAAAAAAAAAAAAAAampqampq
        as8AAAAAampq4GlpaWYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGtra55qamqcAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABpaWlmampq4AAAAABqamrWampqagAAAAAAAAAAAAAAAAAA
        AABqampqampqzwAAAABqamrgaWlpZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa2trnmpq
        apwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGlpaWZqamrgAAAAAGpqatZqampqAAAAAAAA
        AAAAAAAAAAAAAGpqampqamrPAAAAAGpqauBpaWlmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABra2ueampqnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaWlpZmpqauAAAAAAampq1mpq
        amoAAAAAAAAAAAAAAAAAAAAAampqXmpqauhpaWlJampq5GlpaWYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAGtra55qamqcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABpaWlmampq5Wpq
        akhqamrqaWlpXwAAAAAAAAAAAAAAAAAAAAB0dHQLampqr2pqaupqamrvaWlpZgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAa2trnmpqapwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGlp
        aWZqamrzampq/GpqasBtbW0OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGpqauBpaWlmAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGtra0Nqamrnampq5mpqakEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAaWlpZmpqauAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAampq4Glp
        aWYAAAAAAAAAAAAAAAAAAAAAaGhoFmpqaltqamq+ampq/2lpaZtqamqMampq/Wpqar5paWlcb29vFwAA
        AAAAAAAAAAAAAAAAAABpaWlmampq4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABqamrgampqtmtra4hpaWmPampqq2pqas9qamr9ampq9mpqap9ra2syAAAAAAAAAABra2srampqmmpq
        avVqamr+ampq0Wpqaq1qamqQa2triGpqardqamrgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAGpqapBqamrMampqy2pqarRpaWmbampqdmpqakhmZmYKAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAcXFxCWxsbEdqamp2ampqmmpqarRqamrLampqzGpqapUAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////4f///8X///+R////CeAABmPv//zn7/95z+/4
        M5foAmc36f7Od+v/nNfr/xnX6/8D1+v/R9fr/g/X6/5/1+v//9fr/3/X6/5/1+v+f9fr/n/X6/5/1+P+
        f8f7/n/f+/gf3/gDwB/4P/wf////////////////
</value>
  </data>
</root>